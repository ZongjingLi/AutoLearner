(define
(domain Demo)

(:predicate
	(image return_type=[float32,64,64,3] ?o1)
)

(:derived
	(object_feature return_type=[float32,64] ?u1)
	(??f (image ?u1))
)

(:derived
	(pos return_type=[float32,2] ?o1)
	(??f (object_feature ?o1))
)

(:derived
	(left return_type=[float32,2] ?o1 ?o2)
	(??f (object_feature ?o1) (object_feature ?o2))
)


(:derived
	(state return_type=[float32,64] ?o1)
	(??f (image ?o1))
)

(:derived
	(exist return_type=[float32,1] ?o1)
	(??f (image ?o1))
)

(:derived
	(is-yellow return_type=[float32,1] ?o1)
	(??f (object_feature ?o1))
)

(:derived
	(is-red return_type=[float32,1] ?o1)
	( filter(o1,red) )
)

(:action turnleft
	:parameter (?o1 ?o2)
	:precond
		(?o1::exists ??f(?o2::pos))
	:effect (
		and
		(is-yellow::assign
			?o1
			(??h (object_feature ?o2) )
		)
		(state::assign
			?o1
			(??g (object_feature ?o2) )
		)
	)
)

(:action demo-act
	:parameter (?o1 ?o2)
	:effect (
		and
		(is-yellow::assign
			?o1 
			(??f (state ?o2))
		)
		and
		(pos::assign
			?o1
			(??g (state ?o2))
		)
		(state::assign
			?o1 
			(??h (left ?o2 ?o1) (state ?o2))
		)
	)
)

(:action move-in
	:parameter (?o1 ?o2)
	:precond
		(exists: ?o1)
	:effect (
		(pos::assign
		?o1
		(??f (state ?o2) (pos ?o1))
		)
	)
)

)